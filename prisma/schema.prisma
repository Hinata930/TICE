generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  // output                           = "./generated/zod" // default is ./generated/zod
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  // createInputTypes                 = false // default is true
  // createModelTypes                 = false // default is true
  // addInputTypeValidation           = false // default is true
  // addIncludeType                   = false // default is true
  // addSelectType                    = false // default is true
  // validateWhereUniqueInput         = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Role {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at       DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  team_id          String?     @db.Uuid
  /// @zod.string.min(1, { message: "please use at least 1 character." }).max(32, { message: "please keep it under 32 characters." })
  role_name        String      @db.VarChar(32)
  /// @zod.string.min(1, { message: "please use at least 1 character." }).max(256, { message: "please keep it under 256 characters." })
  role_description String?     @db.VarChar(256)
  teams            Team?      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_role        UserRole[]

  @@unique([team_id, role_name], map: "unique_team_role")
  @@map("roles")
}

model Task {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime  @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at       DateTime  @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  task_creator     String?   @db.Uuid
  team_id          String?   @db.Uuid
  due_date         DateTime? @db.Date
  /// @zod.string.min(1, { message: "please use at least 1 character." }).max(64, { message: "please keep it under 64 characters." })
  task_title       String    @db.VarChar(64)
  /// @zod.string.max(2048, { message: "please keep it  under 2048 characters." })
  task_description String?   @db.VarChar(2048)
  teams            Team?    @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_team")
  users            User?    @relation(fields: [task_creator], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tasks")
}

model Team {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  /// @zod.string.min(2, { message: "please use at least 2 characters." }).max(32, { message: "please keep it under 32 characters." })
  team_name  String      @db.VarChar(32)
  creator    String?     @db.Uuid 
  users      User?      @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles      Role[]
  tasks      Task[]
  user_role  UserRole[]
  user_team  UserTeam[]

  @@map("teams")
}

model UserTeam {
  created_at DateTime @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at DateTime @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  user_id    String?  @db.Uuid
  team_id    String?  @db.Uuid
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teams      Team?   @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_team_team_id")
  users      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_team_user_id")
  
  @@map("user_team")
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at    DateTime    @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  user_id       String      @unique @db.VarChar(32)
  username      String?     @unique @db.VarChar(64)
  first_name    String?     @db.VarChar(256)
  last_name     String?     @db.VarChar(256)
  email_address String
  image_url     String
  tasks         Task[]
  user_role     UserRole[]
  user_team     UserTeam[]
  teams         Team[]

  @@map("users")
}

model UserRole {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  updated_at DateTime @default(dbgenerated("clock_timestamp()")) @db.Timestamptz(6)
  user_id    String?  @db.Uuid
  team_id    String?  @db.Uuid
  role_id    String?  @db.Uuid
  roles      Role?   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams      Team?   @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, user_id])
  @@map("user_role")
}
