CREATE TABLE users(
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  user_id VARCHAR(32) UNIQUE NOT NULL,
  username VARCHAR(64) UNIQUE NOT NULL,
  first_name VARCHAR(256),
  last_name VARCHAR(256),
  email_address TEXT NOT NULL,
  image_url TEXT NOT NULL
);

CREATE TABLE teams(
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  team_name VARCHAR(32) NOT NULL
);

CREATE TABLE user_team (
  created_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  user_id UUID REFERENCES users(id),
  team_id UUID REFERENCES teams(id)
);

CREATE TABLE tasks(
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(),
  task_creator UUID REFERENCES users(id),
  team_id UUID REFERENCES teams(id),
  due_date DATE,
  task_title VARCHAR(256) NOT NULL,
  task_description TEXT
);





      case 'user.created':
        // UserJSON.user_id is a string
        const user_id = evt.data.id;
        // UserJSON.username is a string
        const username = evt.data.username;
        // UserJSON.firstName is a string
        const firstName = evt.data.first_name;
        // UserJSON.lastName is a string
        const lastName = evt.data.last_name;
        // UserJSON.email_address is a string
        const email_address = evt.data.email_addresses[0].email_address;
        // UserJSON.image_url is a string
        const image_url = evt.data.image_url;

        try {
          await sql`
            INSERT INTO users (user_id, username, first_name, last_name, email_address, image_url)
            VALUES (
              ${user_id},
              ${username}, 
              ${firstName}, 
              ${lastName}, 
              ${email_address}, 
              ${image_url}
            );
          `;
          console.log('User inserted successfully.');
          return NextResponse.json({msg: 'OK'},{status: 200,});
        } catch (error) {
          console.error('Error inserting user:', error);
          return NextResponse.json({error: 'Internal Server Error'}, {status: 500},);
        }
        break;

      default:
        console.log('Unsupported event type:', evt.type);






case 'user.deleted':
        // UserJSON.user_id is a string
        const user_id = evt.data.id
  
        try {
          await sql`
            DELETE FROM users WHERE user_id = ${user_id}
          `;
          console.log('User deleting successfully.');
          res.status(200).end('OK');
        } catch (error) {
          console.error('Error deleting user:', error);
          res.status(500).end('Internal Server Error');
        }
        break;
  
      default:
        console.log('Unsupported event type:', evt.type);




case 'user.updated':
        // UserJSON.id is a string
        const user_id = evt.data.id;
        // UserJSON.username is a string
        const username = evt.data.username;
        // UserJSON.first_name is a string
        const firstName = evt.data.first_name;
        // UserJSON.last_name is a string
        const lastName = evt.data.last_name;
        // UserJSON.email_addresses[0].email_address is a string
        const email_address = evt.data.email_addresses[0].email_address;
        // UserJSON.image_url is a string
        const image_url = evt.data.image_url;
  
        try {
          await sql`
            UPDATE users SET 
              username = ${username},
              firstName = ${firstName},
              lastName = ${lastName},
              email_address = ${email_address},
              image_url = ${image_url}
  
            WHERE user_id = ${user_id}
          `;
          console.log('User updating successfully.');
          res.status(200).end('OK');
        } catch (error) {
          console.error(`Error updating user (user_id: ${user_id}):`, error);
          res.status(500).end('Internal Server Error');
        }
        break;
  
      default:
        console.log('Unsupported event type:', evt.type);
        





import { Webhook } from 'svix'
import { headers } from 'next/headers'
import { WebhookEvent } from '@clerk/nextjs/server'
import { sql } from '@vercel/postgres';
 
export async function POST(req: Request) {
 
  // You can find this in the Clerk Dashboard -> Webhooks -> choose the webhook
  const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET_USER_CREATED;
 
  if (!WEBHOOK_SECRET) {
    throw new Error('Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local')
  }
 
  // Get the headers
  const headerPayload = headers();
  const svix_id = headerPayload.get("svix-id");
  const svix_timestamp = headerPayload.get("svix-timestamp");
  const svix_signature = headerPayload.get("svix-signature");
 
  // If there are no headers, error out
  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new Response('Error occured -- no svix headers', {
      status: 400
    })
  }
 
  // Get the body
  const payload = await req.json()
  const body = JSON.stringify(payload);
 
  // Create a new Svix instance with your secret.
  const wh = new Webhook(WEBHOOK_SECRET);
 
  let evt: WebhookEvent
 
  // Verify the payload with the headers
  try {
    evt = wh.verify(body, {
      "svix-id": svix_id,
      "svix-timestamp": svix_timestamp,
      "svix-signature": svix_signature,
    }) as WebhookEvent
  } catch (err) {
    console.error('Error verifying webhook:', err);
    return new Response('Error occured', {
      status: 400
    });
  }

  switch (evt.type) {
    case 'user.created':
      // UserJSON.user_id is a string
      const user_id = evt.data.id;
      // UserJSON.username is a string
      const username = evt.data.username;
      // UserJSON.firstName is a string
      const firstName = evt.data.first_name;
      // UserJSON.lastName is a string
      const lastName = evt.data.last_name;
      // UserJSON.email_address is a string
      const email_address = evt.data.email_addresses[0].email_address;
      // UserJSON.image_url is a string
      const image_url = evt.data.image_url;

      try {
        await sql`
          INSERT INTO users (user_id, username, first_name, last_name, email_address, image_url)
          VALUES (
            ${user_id},
            ${username}, 
            ${firstName}, 
            ${lastName}, 
            ${email_address}, 
            ${image_url}
          );
        `;
        console.log('User inserted successfully.');
        return new Response('OK',{status: 200,});
      } catch (error) {
        console.error('Error inserting user:', error);
        return new Response('Internal Server Error', { status: 500 });
      }

    default:
      console.log('Unsupported event type:', evt.type);
  }
}
 